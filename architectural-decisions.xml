<?xml version="1.0" encoding="UTF-8"?>
<architecturalDecisions xmlns="https://architectural-decision.cspray.io/schema/architectural-decision.xsd">
  <architecturalDecision id="SingleEntrypointDefinitionProvider" attribute="Cspray\AnnotatedContainer\ArchitecturalDecisionRecords\SingleEntrypointDefinitionProvider">
    <date>2022-07-19</date>
    <status>Accepted</status>
    <contents><![CDATA[# Allow Single Entrypoint for DefinitionProvider

## Context

A DefinitionsProvider is intended to support adding third-party services that can't be annotated to a
ContainerDefinition. It could be beneficial to attach multiple consumers so that complex third-party service setup
does not have to happen entirely in 1 implementation.

## Decision

We explicitly only allow one DefinitionsProvider to be configured when compiling your ContainerDefinition.

It would be technically possible, and even straightforward, to allow configuring multiple providers. However, doing
so would have a significant cognitive overhead and, potentially, cause what services are used in a given situation to
be vague or unclear. Specifically, third-party packages could override your definitions without you being fully
aware of it.

If you need to use multiple providers or providers implemented by third-parties then you're required to provide your
own entrypoint and compose them together or explicitly define which third-party provider you'd like to use. This way
you know precisely what code is determining the services for your application.]]></contents>
    <codeAnnotations>
      <codeAnnotation>
        <classMethod>
          <class>Cspray\AnnotatedContainer\StaticAnalysis\ContainerDefinitionAnalysisOptions</class>
          <method>getDefinitionProvider</method>
        </classMethod>
      </codeAnnotation>
      <codeAnnotation>
        <classMethod>
          <class>Cspray\AnnotatedContainer\StaticAnalysis\ContainerDefinitionAnalysisOptionsBuilder</class>
          <method>withDefinitionProvider</method>
        </classMethod>
      </codeAnnotation>
      <codeAnnotation>
        <classMethod>
          <class>Cspray\AnnotatedContainer\Bootstrap\BootstrappingConfiguration</class>
          <method>getContainerDefinitionProvider</method>
        </classMethod>
      </codeAnnotation>
      <codeAnnotation>
        <classMethod>
          <class>Cspray\AnnotatedContainer\Bootstrap\XmlBootstrappingConfiguration</class>
          <method>getContainerDefinitionProvider</method>
        </classMethod>
      </codeAnnotation>
    </codeAnnotations>
    <meta>
      <author>
        <name>Charles Sprayberry</name>
        <website>https://cspray.io</website>
        <githubProfile>https://github.com/cspray</githubProfile>
      </author>
    </meta>
  </architecturalDecision>
  <architecturalDecision id="DeprecateConfigurationInFavorOfCustomServiceAttribute" attribute="Cspray\AnnotatedContainer\ArchitecturalDecisionRecords\DeprecateConfigurationInFavorOfCustomServiceAttribute">
    <date>2023-05-14</date>
    <status>Accepted</status>
    <contents><![CDATA[# ConfigurationAttribute is Deprecated

## Context

When Annotated Container launched it was decided to have a ConfigurationAttribute that could act as a type-safe,
container-managed way to handle app configs. Shared services attributed with a ConfigurationAttribute follow
slightly different rules than a ServiceAttribute. Specifically, they are not allowed to be assigned profiles,
cannot be marked primary, and can have values injected into a property without a constructor.

## Decision

In practice the limitations around ConfigurationAttribute were hard to work with. Of important note is the desire to
have a default configuration provided by a library and the app easily overriding it. This is possible with the
ServiceAttribute out-of-the-box. Additionally, the opinion that Configuration should not have profiles was arbitrary
in nature and only put limitations on the use of the Configuration without providing any real value. On top of all
that, the idea that Configuration would be the only type of services to injecting values directly onto a property
was made obsolete with constructor property promotion.

We could simply add these pieces of the ConfigurationAttribute but at that point we're effectively duplicating the
ServiceAttribute. Instead of that, we should discourage the use of the ConfigurationAttribute. If you require similar
functionality, you should implement your own custom ServiceAttribute.]]></contents>
    <codeAnnotations>
      <codeAnnotation>
        <class>Cspray\AnnotatedContainer\Definition\ConfigurationDefinition</class>
      </codeAnnotation>
      <codeAnnotation>
        <class>Cspray\AnnotatedContainer\Definition\ConfigurationDefinitionBuilder</class>
      </codeAnnotation>
      <codeAnnotation>
        <class>Cspray\AnnotatedContainer\Attribute\Configuration</class>
      </codeAnnotation>
      <codeAnnotation>
        <class>Cspray\AnnotatedContainer\Attribute\ConfigurationAttribute</class>
      </codeAnnotation>
    </codeAnnotations>
    <meta>
      <author>
        <name>Charles Sprayberry</name>
        <website>https://cspray.io</website>
        <githubProfile>https://github.com/cspray</githubProfile>
      </author>
      <deprecation>
        <since>2.1.0</since>
        <scheduledForRemoval>3.0.0</scheduledForRemoval>
      </deprecation>
    </meta>
  </architecturalDecision>
  <architecturalDecision id="ConfigurationCannotBeAssignedProfiles" attribute="Cspray\AnnotatedContainer\ArchitecturalDecisionRecords\ConfigurationCannotBeAssignedProfiles">
    <date>2022-08-10</date>
    <status>Superseded</status>
    <contents><![CDATA[# Configuration instances cannot be assigned profiles

## Context

Configuration instances are classes with properties that can have arbitrary values injected into them with the
#[Inject] Attribute. Like a Service, Configuration instances are shared with the Container. Unlike a Service,
Configuration cannot be assigned an explicit profile.

## Decision

We explicitly do no allow setting a profile on a Configuration. The Configuration is meant to use #[Inject] Attributes
to define values. Any value that should only be injected when certain profiles are active should have that reflected
in the #[Inject] Attribute. This way just 1 Configuration instance is required and any profile-specific values are
defined on the value itself.]]></contents>
    <codeAnnotations>
      <codeAnnotation>
        <class>Cspray\AnnotatedContainer\Definition\ConfigurationDefinition</class>
      </codeAnnotation>
      <codeAnnotation>
        <class>Cspray\AnnotatedContainer\Attribute\Configuration</class>
      </codeAnnotation>
    </codeAnnotations>
    <meta>
      <author>
        <name>Charles Sprayberry</name>
        <website>https://cspray.io</website>
        <githubProfile>https://github.com/cspray</githubProfile>
      </author>
      <supersededBy>DeprecateConfigurationInFavorOfCustomServiceAttribute</supersededBy>
    </meta>
  </architecturalDecision>
</architecturalDecisions>
